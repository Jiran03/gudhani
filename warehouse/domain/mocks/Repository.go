// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/Jiran03/gudtani/warehouse/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *Repository) Create(_a0 domain.Warehouse) (domain.Warehouse, error) {
	ret := _m.Called(_a0)

	var r0 domain.Warehouse
	if rf, ok := ret.Get(0).(func(domain.Warehouse) domain.Warehouse); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Warehouse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Warehouse) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *Repository) Get() ([]domain.Warehouse, error) {
	ret := _m.Called()

	var r0 []domain.Warehouse
	if rf, ok := ret.Get(0).(func() []domain.Warehouse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Warehouse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByAddress provides a mock function with given fields: address
func (_m *Repository) GetByAddress(address string) ([]domain.Warehouse, error) {
	ret := _m.Called(address)

	var r0 []domain.Warehouse
	if rf, ok := ret.Get(0).(func(string) []domain.Warehouse); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Warehouse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *Repository) GetByID(id int) (domain.Warehouse, error) {
	ret := _m.Called(id)

	var r0 domain.Warehouse
	if rf, ok := ret.Get(0).(func(int) domain.Warehouse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Warehouse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, _a1
func (_m *Repository) Update(id int, _a1 domain.Warehouse) (domain.Warehouse, error) {
	ret := _m.Called(id, _a1)

	var r0 domain.Warehouse
	if rf, ok := ret.Get(0).(func(int, domain.Warehouse) domain.Warehouse); ok {
		r0 = rf(id, _a1)
	} else {
		r0 = ret.Get(0).(domain.Warehouse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.Warehouse) error); ok {
		r1 = rf(id, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCapacity provides a mock function with given fields: id, newCapacity
func (_m *Repository) UpdateCapacity(id int, newCapacity int) error {
	ret := _m.Called(id, newCapacity)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, newCapacity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t testing.TB) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
